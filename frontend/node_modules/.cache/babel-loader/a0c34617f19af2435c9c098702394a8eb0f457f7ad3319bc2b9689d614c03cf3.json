{"ast":null,"code":"import EXIF from 'exif-js';\n\n// GPS 좌표를 십진수로 변환하는 함수\nconst convertToDecimal = gpsData => {\n  if (!gpsData || gpsData.length < 3) return null;\n  const degrees = gpsData[0];\n  const minutes = gpsData[1];\n  const seconds = gpsData[2];\n  const decimal = degrees + minutes / 60 + seconds / 3600;\n  return decimal;\n};\n\n// EXIF 데이터를 추출하는 함수\nexport const extractExifData = (file, callback) => {\n  EXIF.getData(file, function () {\n    const allExifData = EXIF.getAllTags(this); // 전체 EXIF 데이터\n    const gpsLat = EXIF.getTag(this, 'GPSLatitude');\n    const gpsLon = EXIF.getTag(this, 'GPSLongitude');\n    const gpsLatRef = EXIF.getTag(this, 'GPSLatitudeRef');\n    const gpsLonRef = EXIF.getTag(this, 'GPSLongitudeRef');\n    const dateTime = EXIF.getTag(this, 'DateTimeOriginal'); // 타임스탬프 정보\n\n    if (gpsLat && gpsLon && gpsLatRef && gpsLonRef) {\n      let latDecimal = convertToDecimal(gpsLat);\n      let lonDecimal = convertToDecimal(gpsLon);\n      if (gpsLatRef === 'S') latDecimal = -latDecimal;\n      if (gpsLonRef === 'W') lonDecimal = -lonDecimal;\n      callback({\n        latitude: latDecimal,\n        longitude: lonDecimal,\n        dateTime: dateTime || '시간 정보 없음'\n      });\n    } else {\n      console.log('GPS 정보가 없습니다.');\n      callback(null);\n    }\n  });\n};","map":{"version":3,"names":["EXIF","convertToDecimal","gpsData","length","degrees","minutes","seconds","decimal","extractExifData","file","callback","getData","allExifData","getAllTags","gpsLat","getTag","gpsLon","gpsLatRef","gpsLonRef","dateTime","latDecimal","lonDecimal","latitude","longitude","console","log"],"sources":["/Users/son-yeonghyeon/Desktop/ieum-connect/ieum-connect/frontend/src/function/exif.js"],"sourcesContent":["import EXIF from 'exif-js';\n\n// GPS 좌표를 십진수로 변환하는 함수\nconst convertToDecimal = (gpsData) => {\n  if (!gpsData || gpsData.length < 3) return null;\n  const degrees = gpsData[0];\n  const minutes = gpsData[1];\n  const seconds = gpsData[2];\n  const decimal = degrees + (minutes / 60) + (seconds / 3600);\n  return decimal;\n};\n\n// EXIF 데이터를 추출하는 함수\nexport const extractExifData = (file, callback) => {\n  EXIF.getData(file, function () {\n    const allExifData = EXIF.getAllTags(this); // 전체 EXIF 데이터\n    const gpsLat = EXIF.getTag(this, 'GPSLatitude');\n    const gpsLon = EXIF.getTag(this, 'GPSLongitude');\n    const gpsLatRef = EXIF.getTag(this, 'GPSLatitudeRef');\n    const gpsLonRef = EXIF.getTag(this, 'GPSLongitudeRef');\n    const dateTime = EXIF.getTag(this, 'DateTimeOriginal'); // 타임스탬프 정보\n\n    if (gpsLat && gpsLon && gpsLatRef && gpsLonRef) {\n      let latDecimal = convertToDecimal(gpsLat);\n      let lonDecimal = convertToDecimal(gpsLon);\n      if (gpsLatRef === 'S') latDecimal = -latDecimal;\n      if (gpsLonRef === 'W') lonDecimal = -lonDecimal;\n\n      callback({\n        latitude: latDecimal,\n        longitude: lonDecimal,\n        dateTime: dateTime || '시간 정보 없음',\n      });\n    } else {\n      console.log('GPS 정보가 없습니다.');\n      callback(null);\n    }\n  });\n};\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;;AAE1B;AACA,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;EACpC,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,IAAI;EAC/C,MAAMC,OAAO,GAAGF,OAAO,CAAC,CAAC,CAAC;EAC1B,MAAMG,OAAO,GAAGH,OAAO,CAAC,CAAC,CAAC;EAC1B,MAAMI,OAAO,GAAGJ,OAAO,CAAC,CAAC,CAAC;EAC1B,MAAMK,OAAO,GAAGH,OAAO,GAAIC,OAAO,GAAG,EAAG,GAAIC,OAAO,GAAG,IAAK;EAC3D,OAAOC,OAAO;AAChB,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EACjDV,IAAI,CAACW,OAAO,CAACF,IAAI,EAAE,YAAY;IAC7B,MAAMG,WAAW,GAAGZ,IAAI,CAACa,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3C,MAAMC,MAAM,GAAGd,IAAI,CAACe,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC;IAC/C,MAAMC,MAAM,GAAGhB,IAAI,CAACe,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC;IAChD,MAAME,SAAS,GAAGjB,IAAI,CAACe,MAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC;IACrD,MAAMG,SAAS,GAAGlB,IAAI,CAACe,MAAM,CAAC,IAAI,EAAE,iBAAiB,CAAC;IACtD,MAAMI,QAAQ,GAAGnB,IAAI,CAACe,MAAM,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC,CAAC;;IAExD,IAAID,MAAM,IAAIE,MAAM,IAAIC,SAAS,IAAIC,SAAS,EAAE;MAC9C,IAAIE,UAAU,GAAGnB,gBAAgB,CAACa,MAAM,CAAC;MACzC,IAAIO,UAAU,GAAGpB,gBAAgB,CAACe,MAAM,CAAC;MACzC,IAAIC,SAAS,KAAK,GAAG,EAAEG,UAAU,GAAG,CAACA,UAAU;MAC/C,IAAIF,SAAS,KAAK,GAAG,EAAEG,UAAU,GAAG,CAACA,UAAU;MAE/CX,QAAQ,CAAC;QACPY,QAAQ,EAAEF,UAAU;QACpBG,SAAS,EAAEF,UAAU;QACrBF,QAAQ,EAAEA,QAAQ,IAAI;MACxB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLK,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5Bf,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}